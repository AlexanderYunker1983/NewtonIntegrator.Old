using System;
using System.Globalization;
using System.Windows.Data;

namespace ManagedHelpers.Converters
{
    public class NullableBoolToBoolConverter:IMultiValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            var nullableBool = (bool?) value;
            var str = parameter as string;
            if  (str == "null")
            {
                return !nullableBool.HasValue;
            }
            if (nullableBool.HasValue)
            {
                bool boolParam;
                return Boolean.TryParse(str, out boolParam) ? nullableBool.Value == boolParam : nullableBool.Value;
            }
            return false;
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            var boolValue = (bool) value;
            var str = parameter as string;
            if (str == "null")
            {
                return boolValue ? (bool?)null : false;
            }
            bool boolParam;
            if (Boolean.TryParse(str, out boolParam))
            {
                if (boolParam && boolValue)
                {
                    return true;
                }
                if (!boolParam && boolValue)
                {
                    return false;
                }

                return true;
            }
            return boolValue;
        }

        public object Convert(object[] values, Type targetType, object parameter, CultureInfo culture)
        {
            var value = (bool?) values[0];
            var isHidden = (bool) values[1];
            var str = parameter as string;
            if (string.IsNullOrEmpty(str))
            {
                return isHidden;
            }
            if (str.Equals("true", StringComparison.InvariantCultureIgnoreCase))
            {
                return !isHidden && value.Value;
            }
            if (str.Equals("false", StringComparison.InvariantCultureIgnoreCase))
            {
                return !isHidden && !value.Value;
            }
            throw new ArgumentException("Parameter must be 'true'/'false'/empty");
        }

        public object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture)
        {
            var val = (bool) value;
            var str = parameter as string;
            if (string.IsNullOrEmpty(str))
            {
                if (val)
                {
                    return new object[] {null,true};
                }
                return new object[] {null, false};
            }
            if (str.Equals("true", StringComparison.InvariantCultureIgnoreCase))
            {
                return new object[] {val, false};
            }
            if (str.Equals("false", StringComparison.InvariantCultureIgnoreCase))
            {
                return new object[] { !val, false };
            }
            throw new ArgumentException("Parameter must be 'true'/'false'/empty");
        }
    }
}